package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.NewTransactionInput) (*models.Transaction, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.CreateTransaction(ctx, input)
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id uint, input model.UpdateTransactionInput) (*models.Transaction, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.UpdateTransaction(ctx, id, input)
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.DeleteTransaction(ctx, id)
}

// ApproveTransaction is the resolver for the approveTransaction field.
func (r *mutationResolver) ApproveTransaction(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.ApproveTransaction(ctx, id)
}

// BlockTransaction is the resolver for the blockTransaction field.
func (r *mutationResolver) BlockTransaction(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.BlockTransaction(ctx, id)
}

// WaitingTransaction is the resolver for the waitingTransaction field.
func (r *mutationResolver) WaitingTransaction(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.WaitingTransaction(ctx, id)
}

// CancelTransaction is the resolver for the cancelTransaction field.
func (r *mutationResolver) CancelTransaction(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.CancelTransaction(ctx, id)
}

// GetTransactions is the resolver for the getTransactions field.
func (r *queryResolver) GetTransactions(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.TransactionList, error) {
	ldr := loaders.For(ctx)
	return ldr.TransactionReader.GetTransactions(ctx, filters, orders, pagination)
}
