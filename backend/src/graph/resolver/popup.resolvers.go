package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreatePopup is the resolver for the createPopup field.
func (r *mutationResolver) CreatePopup(ctx context.Context, input model.NewPopupInput) (*models.Popup, error) {
	ldr := loaders.For(ctx)
	return ldr.PopupReader.CreatePopup(ctx, input)
}

// UpdatePopup is the resolver for the updatePopup field.
func (r *mutationResolver) UpdatePopup(ctx context.Context, id uint, input model.UpdatePopupInput) (*models.Popup, error) {
	ldr := loaders.For(ctx)
	return ldr.PopupReader.UpdatePopup(ctx, id, input)
}

// DeletePopup is the resolver for the deletePopup field.
func (r *mutationResolver) DeletePopup(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	if err := ldr.PopupReader.DeletePopup(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// Popups is the resolver for the popups field.
func (r *queryResolver) Popups(ctx context.Context) ([]*models.Popup, error) {
	panic(fmt.Errorf("not implemented: Popups - popups"))
}

// GetPopups is the resolver for the getPopups field.
func (r *queryResolver) GetPopups(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.PopupList, error) {
	ldr := loaders.For(ctx)
	return ldr.PopupReader.GetPopups(ctx, filters, orders, pagination)
}
