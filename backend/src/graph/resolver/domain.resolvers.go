package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateDomain is the resolver for the createDomain field.
func (r *mutationResolver) CreateDomain(ctx context.Context, input model.NewDomainInput) (*models.Domain, error) {
	panic(fmt.Errorf("not implemented: CreateDomain - createDomain"))
}

// UpdateDomain is the resolver for the updateDomain field.
func (r *mutationResolver) UpdateDomain(ctx context.Context, id uint, input model.UpdateDomainInput) (*models.Domain, error) {
	panic(fmt.Errorf("not implemented: UpdateDomain - updateDomain"))
}

// DeleteDomain is the resolver for the deleteDomain field.
func (r *mutationResolver) DeleteDomain(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDomain - deleteDomain"))
}

// Domains is the resolver for the domains field.
func (r *queryResolver) Domains(ctx context.Context) ([]*models.Domain, error) {
	panic(fmt.Errorf("not implemented: Domains - domains"))
}

// GetDomains is the resolver for the getDomains field.
func (r *queryResolver) GetDomains(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.DomainList, error) {
	ldr := loaders.For(ctx)
	return ldr.DomainReader.GetDomains(ctx, filters, orders, pagination)
}
