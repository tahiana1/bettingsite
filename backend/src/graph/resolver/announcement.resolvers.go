package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateAnnouncement is the resolver for the createAnnouncement field.
func (r *mutationResolver) CreateAnnouncement(ctx context.Context, input model.NewAnnouncementInput) (*models.Announcement, error) {
	ldr := loaders.For(ctx)
	return ldr.AnnouncementReader.CreateAnnouncement(ctx, input)
}

// UpdateAnnouncement is the resolver for the updateAnnouncement field.
func (r *mutationResolver) UpdateAnnouncement(ctx context.Context, id uint, input model.UpdateAnnouncementInput) (*models.Announcement, error) {
	ldr := loaders.For(ctx)
	return ldr.AnnouncementReader.UpdateAnnouncement(ctx, id, input)
}

// DeleteAnnouncement is the resolver for the deleteAnnouncement field.
func (r *mutationResolver) DeleteAnnouncement(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.AnnouncementReader.DeleteAnnouncement(ctx, id)
}

// GetAnnouncements is the resolver for the getAnnouncements field.
func (r *queryResolver) GetAnnouncements(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.AnnouncementList, error) {
	ldr := loaders.For(ctx)
	return ldr.AnnouncementReader.GetAnnouncements(ctx, filters, orders, pagination)
}
