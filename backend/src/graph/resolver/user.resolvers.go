package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/hotbrainy/go-betting/backend/db/initializers"
	"github.com/hotbrainy/go-betting/backend/graph/generated"
	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/helpers"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id uint, input model.UpdateProfile) (*models.Profile, error) {
	// Get dataloader from context
	ldr := loaders.For(ctx)
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}

	// Call the update method
	return ldr.ProfileReader.UpdateProfile(ctx, authUser.ID, input)
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context, id uint) (bool, error) {
	// Get dataloader from context
	ldr := loaders.For(ctx)
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return false, err
	}

	if err := ldr.ProfileReader.DeleteProfile(ctx, authUser.ID); err != nil {
		return false, err
	}
	return true, nil
}

// ApproveUser is the resolver for the approveUser field.
func (r *mutationResolver) ApproveUser(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	if err := ldr.UserReader.ApproveUser(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// BlockUser is the resolver for the blockUser field.
func (r *mutationResolver) BlockUser(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	if err := ldr.UserReader.BlockUser(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id uint, input model.UpdateUser) (bool, error) {
	ldr := loaders.For(ctx)
	if err := ldr.UserReader.UpdateUser(ctx, id, input); err != nil {
		return false, err
	}
	return true, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*models.Profile, error) {
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}

	pro, err := loaders.GetProfileByUserID(ctx, authUser.ID)
	if err != nil {
		return nil, err
	}

	return pro, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}
	var me *models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Where("id = ?", authUser.ID).Find(&me).Error; err != nil {
		return nil, err
	}
	return me, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	var users []*models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Find(&users).Error; err != nil {
		return nil, err
	}
	ldr := loaders.For(ctx)
	return ldr.UserReader.GetUsers(ctx)
}

// FilterUsers is the resolver for the filterUsers field.
func (r *queryResolver) FilterUsers(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.UserList, error) {
	ldr := loaders.For(ctx)
	return ldr.UserReader.FilterUsers(ctx, filters, orders, pagination)
}

// ConnectedUsers is the resolver for the connectedUsers field.
func (r *queryResolver) ConnectedUsers(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.UserList, error) {
	ldr := loaders.For(ctx)
	return ldr.UserReader.ConnectedUsers(ctx, filters, orders, pagination)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uint) (*models.User, error) {
	var user *models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Where("id = ?", id).Find(&user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// GetDistributors is the resolver for the getDistributors field.
func (r *queryResolver) GetDistributors(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.UserList, error) {
	ldr := loaders.For(ctx)
	return ldr.UserReader.GetDistributors(ctx, filters, orders, pagination)
}

// Type is the resolver for the type field.
func (r *userResolver) Type(ctx context.Context, obj *models.User) (model.UserType, error) {
	switch obj.Type {
	case model.UserTypeG.String():
		return model.UserTypeG, nil
	case model.UserTypeI.String():
		return model.UserTypeI, nil
	case model.UserTypeW.String():
		return model.UserTypeW, nil
	case model.UserTypeT.String():
		return model.UserTypeT, nil
	}
	return "", fmt.Errorf("Unknown user type %s", obj.Type)
}

// Status is the resolver for the status field.
func (r *userResolver) Status(ctx context.Context, obj *models.User) (model.UserStatus, error) {
	switch obj.Status {
	case model.UserStatusA.String():
		return model.UserStatusA, nil
	case model.UserStatusB.String():
		return model.UserStatusB, nil
	case model.UserStatusD.String():
		return model.UserStatusD, nil
	case model.UserStatusI.String():
		return model.UserStatusI, nil
	case model.UserStatusS.String():
		return model.UserStatusS, nil
	case model.UserStatusP.String():
		return model.UserStatusP, nil
	}
	return "", fmt.Errorf("Unknown status %s", obj.Status)
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
