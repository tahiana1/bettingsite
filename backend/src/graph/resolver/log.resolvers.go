package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/hotbrainy/go-betting/backend/graph/generated"
	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
	"gorm.io/gorm"
)

// DeletedAt is the resolver for the deletedAt field.
func (r *logResolver) DeletedAt(ctx context.Context, obj *models.Log) (*gorm.DeletedAt, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// CreateLog is the resolver for the createLog field.
func (r *mutationResolver) CreateLog(ctx context.Context, input model.NewLogInput) (*models.Log, error) {
	panic(fmt.Errorf("not implemented: CreateLog - createLog"))
}

// DeleteLog is the resolver for the deleteLog field.
func (r *mutationResolver) DeleteLog(ctx context.Context, id uint) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLog - deleteLog"))
}

// Logs is the resolver for the logs field.
func (r *queryResolver) Logs(ctx context.Context) ([]*models.Log, error) {
	panic(fmt.Errorf("not implemented: Logs - logs"))
}

// GetLogs is the resolver for the getLogs field.
func (r *queryResolver) GetLogs(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.LogList, error) {
	ldr := loaders.For(ctx)
	return ldr.LogReader.GetLogs(ctx, filters, orders, pagination)
}

// Log returns generated.LogResolver implementation.
func (r *Resolver) Log() generated.LogResolver { return &logResolver{r} }

type logResolver struct{ *Resolver }
