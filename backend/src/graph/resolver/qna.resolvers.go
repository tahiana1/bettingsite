package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateQna is the resolver for the createQNA field.
func (r *mutationResolver) CreateQna(ctx context.Context, input model.NewQnaInput) (*models.Qna, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.CreateQna(ctx, input)
}

// UpdateQna is the resolver for the updateQNA field.
func (r *mutationResolver) UpdateQna(ctx context.Context, id uint, input model.UpdateQnaInput) (*models.Qna, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.UpdateQna(ctx, id, input)
}

// ReplyQna is the resolver for the replyQNA field.
func (r *mutationResolver) ReplyQna(ctx context.Context, id uint, input model.UpdateQnaInput) (*models.Qna, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.ReplyQna(ctx, id, input)
}

// DeleteQna is the resolver for the deleteQNA field.
func (r *mutationResolver) DeleteQna(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.DeleteQna(ctx, id)
}

// CompleteQna is the resolver for the completeQNA field.
func (r *mutationResolver) CompleteQna(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.CompleteQna(ctx, id)
}

// GetQnas is the resolver for the getQnas field.
func (r *queryResolver) GetQnas(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.QnaList, error) {
	ldr := loaders.For(ctx)
	return ldr.QnaReader.GetQnas(ctx, filters, orders, pagination)
}
