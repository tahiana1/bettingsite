package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateSMSApi is the resolver for the createSMSApi field.
func (r *mutationResolver) CreateSMSApi(ctx context.Context, input model.NewSMSApiInput) (*models.SMSApi, error) {
	ldr := loaders.For(ctx)
	return ldr.SMSApiReader.CreateSMSApi(ctx, input)
}

// UpdateSMSApi is the resolver for the updateSMSApi field.
func (r *mutationResolver) UpdateSMSApi(ctx context.Context, id uint, input model.UpdateSMSApiInput) (*models.SMSApi, error) {
	ldr := loaders.For(ctx)
	return ldr.SMSApiReader.UpdateSMSApi(ctx, id, input)
}

// DeleteSMSApi is the resolver for the deleteSMSApi field.
func (r *mutationResolver) DeleteSMSApi(ctx context.Context, id uint) (bool, error) {
	ldr := loaders.For(ctx)
	return ldr.SMSApiReader.DeleteSMSApi(ctx, id)
}

// GetSMSApis is the resolver for the getSMSApis field.
func (r *queryResolver) GetSMSApis(ctx context.Context, filters []*model.Filter, orders []*model.Order, pagination *model.Pagination) (*model.SMSApiList, error) {
	ldr := loaders.For(ctx)
	return ldr.SMSApiReader.GetSMSApis(ctx, filters, orders, pagination)
}
