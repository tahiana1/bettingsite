package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"io"
	"os"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/hotbrainy/go-betting/backend/graph/generated"
)

// Time is the resolver for the time field.
func (r *mutationResolver) Time(ctx context.Context) (*time.Time, error) {
	t := time.Now()
	return &t, nil
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file graphql.Upload) (string, error) {
	uploadDir := "./uploads/"
	os.MkdirAll(uploadDir, os.ModePerm)

	out, err := os.Create(uploadDir + file.Filename)
	if err != nil {
		return "", err
	}
	defer out.Close()
	_, err = io.Copy(out, file.File)
	if err != nil {
		return "", err
	}
	return "Uploaded: " + file.Filename, nil
}

// Time is the resolver for the time field.
func (r *queryResolver) Time(ctx context.Context) (*time.Time, error) {
	t := time.Now()
	return &t, nil
}

// Time is the resolver for the time field.
func (r *subscriptionResolver) Time(ctx context.Context) (<-chan string, error) {
	ch := make(chan string)

	go func() {
		ticker := time.NewTicker(60 * time.Second)
		defer ticker.Stop()
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case t := <-ticker.C:
				ch <- t.Format(time.RFC3339)
			}
		}
	}()

	return ch, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
