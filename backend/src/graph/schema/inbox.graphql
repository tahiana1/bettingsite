type Inbox {
  id: ID!
  type: String!
  title: String!
  description: String!
  status: Boolean!
  orderNum: Uint
  userId: Uint!
  user: User!
  fromId: Uint!
  FromUser: User!
  openedAt: Time
  createdAt: Time!
  updatedAt: Time!
  deletedAt: DeletedAt
}

input UpdateInboxInput {
  type: String
  title: String
  description: String
  status: Boolean
  userId: Uint
  orderNum: Uint
  openedAt: Time
}

input NewInboxInput {
  type: String
  title: String!
  description: String!
  status: Boolean
  userId: Uint!
  orderNum: Uint
  openedAt: Time
}

type InboxList {
  inboxes: [Inbox!]!
  total: Int!
}

extend type Query {
  getInboxes(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): InboxList! @hasRole(role: A)
}

extend type Mutation {
  createInbox(input: NewInboxInput!): Inbox!
    @hasRole(role: A)
  updateInbox(id: ID!, input: UpdateInboxInput!): Inbox!
    @hasRole(role: A)
  deleteInbox(id: ID!): Boolean! @hasRole(role: A)
}
