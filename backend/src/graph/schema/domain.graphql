type Domain {
  id: ID!
  name: String!
  description: String!
  status: Boolean!
  autoReg: Boolean!

  useTelegram: Boolean
  telegram: String
  telegramLink: String
  useKakaoTalk: Boolean
  kakaoTalk: String
  kakaoTalkLink: String
  useServiceCenter: Boolean
  serviceCenter: String
  serviceCenterLink: String
  useLiveDomain: Boolean
  liveDomain: String
  liveDomainLink: String
  memberLevel: Uint
  distributorLevel: Uint

  orderNum: Uint
  userId: ID!
  user: User!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: DeletedAt
}

input UpdateDomainInput {
  name: String
  description: String
  status: Boolean
  userId: ID
  autoReg: Boolean
  orderNum: Uint

  useTelegram: Boolean
  telegram: String
  telegramLink: String
  useKakaoTalk: Boolean
  kakaoTalk: String
  kakaoTalkLink: String
  useServiceCenter: Boolean
  serviceCenter: String
  serviceCenterLink: String
  useLiveDomain: Boolean
  liveDomain: String
  liveDomainLink: String
  memberLevel: Uint
  distributorLevel: Uint
}

input NewDomainInput {
  name: String!
  description: String!
  status: Boolean
  userId: ID!
  autoReg: Boolean
  orderNum: Uint

  useTelegram: Boolean
  telegram: String
  telegramLink: String
  useKakaoTalk: Boolean
  kakaoTalk: String
  kakaoTalkLink: String
  useServiceCenter: Boolean
  serviceCenter: String
  serviceCenterLink: String
  useLiveDomain: Boolean
  liveDomain: String
  liveDomainLink: String
  memberLevel: Uint
  distributorLevel: Uint
}

type DomainList {
  domains: [Domain!]!
  total: Int!
}

extend type Query {
  domains: [Domain!]
  getDomains(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): DomainList! @hasRole(role: A)
}

extend type Mutation {
  createDomain(input: NewDomainInput!): Domain! @hasRole(role: A)
  updateDomain(id: ID!, input: UpdateDomainInput!): Domain! @hasRole(role: A)
  deleteDomain(id: ID!): Boolean! @hasRole(role: A)
}
