type User {
  id: ID!
  name: String!
  userid: String!
  role: String!
  usdtAddress: String!
  currentIP: String!
  IP: String!
  profile: Profile
  status: Boolean!
  orderNum: Uint
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type Profile {
  id: ID!
  userId: ID!
  name: String!
  nickname: String!
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  phoneVerified: Boolean!
  balance: Float!
  point: Int!
  comp: Int!
  level: Int!
  coupon: Int!
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
  lastDeposit: Time
  lastWithdraw: Time
  orderNum: Uint
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

input NewProfile {
  userId: ID!
  name: String!
  nickname: String!
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  balance: Float
  point: Int
  comp: Int
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
}

input UpdateProfile {
  userid: String
  name: String
  nickname: String
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  balance: Float
  point: Int
  comp: Int
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
  currentPassword: String!
  confirmPassword: String
  newPassword: String
}
 

type UserList {
  users: [User!]!
  total: Int!
}

extend type Query {
  profile: Profile! @auth
  me: User! @auth

  users: [User!]! @hasRole(role: ADMIN)
  filterUsers(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): UserList! @hasRole(role: ADMIN)
  user(id: ID!): User @hasRole(role: ADMIN)
}

extend type Mutation {
  updateProfile(input: UpdateProfile!): Profile! @auth
  deleteProfile(id: ID!): Boolean! @auth
  approveUser(id: ID!): Boolean! @hasRole(role: ADMIN)
  blockUser(id: ID!): Boolean! @hasRole(role: ADMIN)
}
