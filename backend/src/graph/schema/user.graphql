enum UserStatus {
  A # approved
  B # blocked
  D # deleted
  I # inactivated
  S # suspended
  P # pending
}

enum UserType {
  G # general
  T # test
  I # interest
  W # working
}

type User {
  id: ID!
  name: String!
  userid: String!
  type: UserType!
  role: String!
  usdtAddress: String!
  currentIP: String!
  IP: String!
  rootId: ID
  root: User
  parentId: ID
  parent: User
  children: [User]
  childrenCount: Uint
  profile: Profile
  status: UserStatus!
  blackMemo: Boolean!
  orderNum: Uint
  os: String
  device: String
  fingerPrint: String

  live: Float
  slot: Float
  hold: Float  

  entireLosing : Float
  liveLosingBeDang: Float
  slotLosingBeDang: Float
  holdLosingBeDang: Float

  losingMethod: String

  # Additional rolling fields for different game types
  miniDanpolRolling: Float
  miniCombinationRolling: Float
  sportsDanpolRolling: Float
  sportsDupolRolling: Float
  sports3PoleRolling: Float
  sports4PoleRolling: Float
  sports5PoleRolling: Float
  sportsDapolRolling: Float
  virtualGameRolling: Float
  lotusRolling: Float
  mgmRolling: Float
  touchRolling: Float

  # Financial statistics
  membershipDeposit: Float
  membershipWithdrawal: Float
  totalWithdrawal: Float
  numberOfMembers: Int
  rollingHoldings: Float

  # Betting/Winning statistics
  liveBetting: Float
  liveWinning: Float
  slotBetting: Float
  slotJackpot: Float
  miniDanpolBetting: Float
  miniDanpolWinner: Float
  miniCombinationBetting: Float
  miniCombinationWinnings: Float
  sportsDanpolBetting: Float
  sportsDanpolWinner: Float
  sportsDupolBetting: Float
  sportsDupolWinner: Float
  sports3poleBetting: Float
  sports3poleWinner: Float
  sports4poleBetting: Float
  sports4poleWinner: Float
  sports5poleBetting: Float
  sports5poleWinner: Float
  sportsDapolBetting: Float
  sportsDapolWinner: Float
  virtualGameBetting: Float
  virtualGameWinnings: Float
  lotusBetting: Float
  lotusLottery: Float
  mgmBetting: Float
  mgmWinning: Float
  touchBetting: Float
  touchWinning: Float
  holdemBetting: Float
  holdemWinning: Float

  # Rolling statistics
  rollingRate: Float
  rollingTransition: Float

  # Losing statistics
  losingRate: Float
  losingSettlement: Float

  # Partnership statistics
  partnershipRolling: Float
  partnershipMoneyInHand: Float

  createdAt: Time!
  updatedAt: Time!
  deletedAt: DeletedAt
}

type Profile {
  id: ID!
  userId: ID!
  name: String!
  nickname: String!
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  phoneVerified: Boolean!
  balance: Float!
  roll: Float!
  point: Int!
  comp: Int!
  level: Int!
  coupon: Int!
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
  lastDeposit: Time
  lastWithdraw: Time
  orderNum: Uint
  createdAt: Time!
  updatedAt: Time!
  deletedAt: DeletedAt
}

input NewProfile {
  userId: ID!
  name: String!
  nickname: String!
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  balance: Float
  roll: Float
  point: Int
  comp: Int
  level: Int
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
}

input UpdateProfile {
  userid: String
  name: String
  nickname: String
  bankName: String
  holderName: String
  accountNumber: String
  birthday: Time
  phone: String
  mobile: String
  balance: Float
  roll: Float
  point: Int
  comp: Int
  level: Int
  favorites: String
  referral: String
  avatarUrl: String
  bio: String
  socialLinks: String
  currentPassword: String
  confirmPassword: String
  newPassword: String
}

input UpdateUser {
  name: String
  userid: String
  rootId: ID
  partentId: ID
  type: UserType
  role: String
  usdtAddress: String
  status: UserStatus
  orderNum: Uint
  
  live: Float
  slot: Float
  hold: Float
  entireLosing: Float
  liveLosingBeDang: Float
  slotLosingBeDang: Float
  holdLosingBeDang: Float
  losingMethod: String
}

input NewUser {
  name: String
  userid: String!
  type: UserType!
  role: String!
  password: String!
  usdtAddress: String
  currentIP: String
  IP: String
  rootId: ID
  parentId: ID
  childrenCount: Uint
  status: UserStatus!
  blackMemo: Boolean
  orderNum: Uint
  os: String
  device: String
  fingerPrint: String

  domainId: ID
  bankId: ID
  holderName: String
  nickname: String
  phone: String
  settlementId: ID
}

type UserList {
  users: [User!]!
  total: Int!
}

extend type Query {
  profile: Profile! @auth
  me: User! @auth

  users: [User!]! @hasRole(role: A)

  filterUsers(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): UserList! @hasRole(role: A)

  connectedUsers(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): UserList! @hasRole(role: A)

  user(id: ID!): User @hasRole(role: A)

  getDistributors(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): UserList! @hasRole(role: A)

  getDistributorDetails(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): UserList! @hasRole(role: A)
}

extend type Mutation {
  updateProfile(id: ID!, input: UpdateProfile!): Profile! @auth
  deleteProfile(id: ID!): Boolean! @auth
  createUser(input: NewUser): Boolean! @hasRole(role: A)
  approveUser(id: ID!): Boolean! @hasRole(role: A)
  blockUser(id: ID!): Boolean! @hasRole(role: A)
  updateUser(id: ID!, input: UpdateUser!): Boolean! @hasRole(role: A)
}
