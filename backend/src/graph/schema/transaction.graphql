# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Transaction {
  id: ID!

  userId: ID!
  user: User

  type: String
  amount: Float

  balanceBefore: Float
  balanceAfter: Float

  pointBefore: Float
  pointAfter: Float

  status: String
  shortcut: String
  usdtDesc: String

  transactionAt: Time
  approvedAt: Time

  createdAt: Time
  updatedAt: Time
  deletedAt: DeletedAt
}

input NewTransactionInput {
  userId: ID!
  type: String
  amount: Float

  balanceBefore: Float
  balanceAfter: Float

  pointBefore: Float
  pointAfter: Float

  status: String
  shortcut: String
  usdtDesc: String
}

input UpdateTransactionInput {
  type: String
  amount: Float

  balanceBefore: Float
  balanceAfter: Float

  pointBefore: Float
  pointAfter: Float

  status: String
  shortcut: String
  usdtDesc: String
}

type TransactionList {
  transactions: [Transaction!]!
  total: Int!
}

type WeeklyLosingData {
  weekStart: String!
  weekEnd: String!
  site: String!
  distributorID: String!
  distributorName: String!
  distributorLevel: Int!
  nickname: String!
  depositor: String!
  alias: String!
  totalBet: Float!
  totalWinner: Float!
  totalLosingMoney: Float!
  settlementAmount: Float!
  applicationDate: String!
  processingDate: String!
  situation: String!
  userCount: Int!
}

type WeeklyLosingDataList {
  weeklyLosingData: [WeeklyLosingData!]!
  total: Int!
}

extend type Query {
  getTransactions(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): TransactionList! @hasRole(role: A)
  
  getWeeklyLosingData(
    filters: [Filter!]
    orders: [Order!]
    pagination: Pagination
  ): WeeklyLosingDataList! @hasRole(role: A)
}

extend type Mutation {
  createTransaction(input: NewTransactionInput!): Transaction! @hasRole(role: A)
  updateTransaction(id: ID!, input: UpdateTransactionInput!): Transaction! @hasRole(role: A)
  deleteTransaction(id: ID!): Boolean! @hasRole(role: A)
  approveTransaction(id: ID!): Boolean! @hasRole(role: A)
  blockTransaction(id: ID!): Boolean! @hasRole(role: A)
  waitingTransaction(id: ID!): Boolean! @hasRole(role: A)
  cancelTransaction(id: ID!): Boolean! @hasRole(role: A)
}
