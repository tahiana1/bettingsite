package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"io"
	"os"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/hotbrainy/go-betting/backend/db/initializers"
	"github.com/hotbrainy/go-betting/backend/graph/generated"
	"github.com/hotbrainy/go-betting/backend/graph/model"
	"github.com/hotbrainy/go-betting/backend/internal/helpers"
	"github.com/hotbrainy/go-betting/backend/internal/loaders"
	"github.com/hotbrainy/go-betting/backend/internal/models"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file graphql.Upload) (string, error) {
	uploadDir := "./uploads/"
	os.MkdirAll(uploadDir, os.ModePerm)

	out, err := os.Create(uploadDir + file.Filename)
	if err != nil {
		return "", err
	}
	defer out.Close()
	_, err = io.Copy(out, file.File)
	if err != nil {
		return "", err
	}
	return "Uploaded: " + file.Filename, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfile) (*models.Profile, error) {
	// Get dataloader from context
	ldr := loaders.For(ctx)
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}

	// Call the update method
	return ldr.ProfileReader.UpdateProfile(ctx, authUser.ID, input)
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context, id string) (bool, error) {
	// Get dataloader from context
	ldr := loaders.For(ctx)
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return false, err
	}

	if err := ldr.ProfileReader.DeleteProfile(ctx, authUser.ID); err != nil {
		return false, err
	}
	return true, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos := []*model.Todo{
		{ID: "1", Text: "text1", Done: true},
		{ID: "2", Text: "text2", Done: false},
	}
	return todos, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*models.Profile, error) {
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}

	pro, err := loaders.GetProfileByUserID(ctx, authUser.ID)
	if err != nil {
		return nil, err
	}

	return pro, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	authUser, err := helpers.GetAuthUser(ctx)

	if err != nil {
		return nil, err
	}
	var me *models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Where("id = ?", authUser.ID).Find(&me).Error; err != nil {
		return nil, err
	}
	return me, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	var users []*models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	var user *models.User
	if err := initializers.DB.Model(&models.User{}).Preload(("Profile")).Where("id = ?", id).Find(&user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Time is the resolver for the time field.
func (r *subscriptionResolver) Time(ctx context.Context) (<-chan string, error) {
	ch := make(chan string)

	go func() {
		ticker := time.NewTicker(60 * time.Second)
		defer ticker.Stop()
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case t := <-ticker.C:
				ch <- t.Format(time.RFC3339)
			}
		}
	}()

	return ch, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
