// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/hotbrainy/go-betting/backend/internal/models"
)

type AnnouncementList struct {
	Announcements []*models.Announcement `json:"announcements"`
	Total         int32                  `json:"total"`
}

type DomainList struct {
	Domains []*models.Domain `json:"domains"`
	Total   int32            `json:"total"`
}

type EventList struct {
	Events []*models.Event `json:"events"`
	Total  int32           `json:"total"`
}

type Filter struct {
	Field string `json:"field"`
	Value string `json:"value"`
	Op    *Op    `json:"op,omitempty"`
}

type Mutation struct {
}

type NewAnnouncementInput struct {
	Title       string     `json:"title"`
	Description string     `json:"description"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type NewDomainInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Status      *bool  `json:"status,omitempty"`
	OrderNum    *uint  `json:"orderNum,omitempty"`
}

type NewEventInput struct {
	Title       string     `json:"title"`
	Type        string     `json:"type"`
	Description string     `json:"description"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	DomainID    *uint      `json:"domainId,omitempty"`
	Level       *uint      `json:"level,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type NewNotificationInput struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Status      *bool     `json:"status,omitempty"`
	OrderNum    *uint     `json:"orderNum,omitempty"`
	ShowFrom    time.Time `json:"showFrom"`
	ShowTo      time.Time `json:"showTo"`
}

type NewProfile struct {
	UserID        uint       `json:"userId"`
	Name          string     `json:"name"`
	Nickname      string     `json:"nickname"`
	BankName      *string    `json:"bankName,omitempty"`
	HolderName    *string    `json:"holderName,omitempty"`
	AccountNumber *string    `json:"accountNumber,omitempty"`
	Birthday      *time.Time `json:"birthday,omitempty"`
	Phone         *string    `json:"phone,omitempty"`
	Mobile        *string    `json:"mobile,omitempty"`
	Balance       *float64   `json:"balance,omitempty"`
	Point         *int32     `json:"point,omitempty"`
	Comp          *int32     `json:"comp,omitempty"`
	Favorites     *string    `json:"favorites,omitempty"`
	Referral      *string    `json:"referral,omitempty"`
	AvatarURL     *string    `json:"avatarUrl,omitempty"`
	Bio           *string    `json:"bio,omitempty"`
	SocialLinks   *string    `json:"socialLinks,omitempty"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type NotificationList struct {
	Notifications []*models.Notification `json:"notifications"`
	Total         int32                  `json:"total"`
}

type Order struct {
	Field     string          `json:"field"`
	Direction *OrderDirection `json:"direction,omitempty"`
}

type Pagination struct {
	Limit  *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type Todo struct {
	ID   uint         `json:"id"`
	Text string       `json:"text"`
	Done bool         `json:"done"`
	User *models.User `json:"user"`
}

type UpdateAnnouncementInput struct {
	Title       *string    `json:"title,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
	Level       *uint      `json:"level,omitempty"`
}

type UpdateDomainInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Status      *bool   `json:"status,omitempty"`
	OrderNum    *uint   `json:"orderNum,omitempty"`
}

type UpdateEventInput struct {
	Title       *string    `json:"title,omitempty"`
	Type        *string    `json:"type,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	DomainID    *uint      `json:"domainId,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
	Level       *uint      `json:"level,omitempty"`
}

type UpdateNotificationInput struct {
	Title       *string    `json:"title,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type UpdateProfile struct {
	Userid          *string    `json:"userid,omitempty"`
	Name            *string    `json:"name,omitempty"`
	Nickname        *string    `json:"nickname,omitempty"`
	BankName        *string    `json:"bankName,omitempty"`
	HolderName      *string    `json:"holderName,omitempty"`
	AccountNumber   *string    `json:"accountNumber,omitempty"`
	Birthday        *time.Time `json:"birthday,omitempty"`
	Phone           *string    `json:"phone,omitempty"`
	Mobile          *string    `json:"mobile,omitempty"`
	Balance         *float64   `json:"balance,omitempty"`
	Point           *int32     `json:"point,omitempty"`
	Comp            *int32     `json:"comp,omitempty"`
	Favorites       *string    `json:"favorites,omitempty"`
	Referral        *string    `json:"referral,omitempty"`
	AvatarURL       *string    `json:"avatarUrl,omitempty"`
	Bio             *string    `json:"bio,omitempty"`
	SocialLinks     *string    `json:"socialLinks,omitempty"`
	CurrentPassword string     `json:"currentPassword"`
	ConfirmPassword *string    `json:"confirmPassword,omitempty"`
	NewPassword     *string    `json:"newPassword,omitempty"`
}

type UserList struct {
	Users []*models.User `json:"users"`
	Total int32          `json:"total"`
}

type Op string

const (
	OpEq   Op = "eq"
	OpNeq  Op = "neq"
	OpGt   Op = "gt"
	OpGte  Op = "gte"
	OpLt   Op = "lt"
	OpLte  Op = "lte"
	OpLike Op = "like"
)

var AllOp = []Op{
	OpEq,
	OpNeq,
	OpGt,
	OpGte,
	OpLt,
	OpLte,
	OpLike,
}

func (e Op) IsValid() bool {
	switch e {
	case OpEq, OpNeq, OpGt, OpGte, OpLt, OpLte, OpLike:
		return true
	}
	return false
}

func (e Op) String() string {
	return string(e)
}

func (e *Op) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Op(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Op", str)
	}
	return nil
}

func (e Op) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Op) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Op) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RolePartner Role = "PARTNER"
	RoleUser    Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RolePartner,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RolePartner, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
