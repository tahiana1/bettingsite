// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/hotbrainy/go-betting/backend/internal/models"
	"gorm.io/gorm"
)

type AdminPermissionList struct {
	AdminPermissions []*models.AdminPermission `json:"adminPermissions"`
	Total            int32                     `json:"total"`
}

type AnnouncementList struct {
	Announcements []*models.Announcement `json:"announcements"`
	Total         int32                  `json:"total"`
}

type DomainList struct {
	Domains []*models.Domain `json:"domains"`
	Total   int32            `json:"total"`
}

type EventList struct {
	Events []*models.Event `json:"events"`
	Total  int32           `json:"total"`
}

type Filter struct {
	Field *string   `json:"field,omitempty"`
	Value *string   `json:"value,omitempty"`
	Op    *Op       `json:"op,omitempty"`
	Or    []*Filter `json:"or,omitempty"`
	And   []*Filter `json:"and,omitempty"`
}

type InboxList struct {
	Inboxes []*models.Inbox `json:"inboxes"`
	Total   int32           `json:"total"`
}

type LogList struct {
	Logs  []*models.Log `json:"logs"`
	Total int32         `json:"total"`
}

type MenuList struct {
	Menus []*models.Menu `json:"menus"`
	Total int32          `json:"total"`
}

type Mutation struct {
}

type NewAdminPermission struct {
	UserID      uint  `json:"userId"`
	Membership  *bool `json:"membership,omitempty"`
	Financials  *bool `json:"financials,omitempty"`
	Qna         *bool `json:"qna,omitempty"`
	Game        *bool `json:"game,omitempty"`
	Settlement  *bool `json:"settlement,omitempty"`
	Sale        *bool `json:"sale,omitempty"`
	Status      *bool `json:"status,omitempty"`
	Statistical *bool `json:"statistical,omitempty"`
	IP          *bool `json:"ip,omitempty"`
	Dwdelete    *bool `json:"dwdelete,omitempty"`
}

type NewAnnouncementInput struct {
	Title       string     `json:"title"`
	Description string     `json:"description"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type NewDomainInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Status      *bool  `json:"status,omitempty"`
	UserID      uint   `json:"userId"`
	AutoReg     *bool  `json:"autoReg,omitempty"`
	OrderNum    *uint  `json:"orderNum,omitempty"`
}

type NewEventInput struct {
	Title       string     `json:"title"`
	Type        string     `json:"type"`
	Description string     `json:"description"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	DomainID    *uint      `json:"domainId,omitempty"`
	Level       *uint      `json:"level,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type NewInboxInput struct {
	Type        *string    `json:"type,omitempty"`
	Title       string     `json:"title"`
	Description string     `json:"description"`
	Status      *bool      `json:"status,omitempty"`
	UserID      uint       `json:"userId"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	OpenedAt    *time.Time `json:"openedAt,omitempty"`
}

type NewLogInput struct {
	Data   string  `json:"data"`
	Path   string  `json:"path"`
	Method string  `json:"method"`
	IP     string  `json:"ip"`
	Type   string  `json:"type"`
	Phone  *string `json:"phone,omitempty"`
	Status *string `json:"status,omitempty"`
}

type NewMenuInput struct {
	Label       string     `json:"label"`
	Key         string     `json:"key"`
	Path        string     `json:"path"`
	Icon        *string    `json:"icon,omitempty"`
	ParentID    *uint      `json:"parentId,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	OpenedAt    *time.Time `json:"openedAt,omitempty"`
}

type NewNotificationInput struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Status      *bool     `json:"status,omitempty"`
	OrderNum    *uint     `json:"orderNum,omitempty"`
	ShowFrom    time.Time `json:"showFrom"`
	ShowTo      time.Time `json:"showTo"`
}

type NewProfile struct {
	UserID        uint       `json:"userId"`
	Name          string     `json:"name"`
	Nickname      string     `json:"nickname"`
	BankName      *string    `json:"bankName,omitempty"`
	HolderName    *string    `json:"holderName,omitempty"`
	AccountNumber *string    `json:"accountNumber,omitempty"`
	Birthday      *time.Time `json:"birthday,omitempty"`
	Phone         *string    `json:"phone,omitempty"`
	Mobile        *string    `json:"mobile,omitempty"`
	Balance       *float64   `json:"balance,omitempty"`
	Point         *int32     `json:"point,omitempty"`
	Comp          *int32     `json:"comp,omitempty"`
	Level         *int32     `json:"level,omitempty"`
	Favorites     *string    `json:"favorites,omitempty"`
	Referral      *string    `json:"referral,omitempty"`
	AvatarURL     *string    `json:"avatarUrl,omitempty"`
	Bio           *string    `json:"bio,omitempty"`
	SocialLinks   *string    `json:"socialLinks,omitempty"`
}

type NewSettingInput struct {
	Status        *bool      `json:"status,omitempty"`
	Title         *string    `json:"title,omitempty"`
	Description   *string    `json:"description,omitempty"`
	PrimaryDomain *uint      `json:"primaryDomain,omitempty"`
	UserID        *uint      `json:"userId,omitempty"`
	OrderNum      *uint      `json:"orderNum,omitempty"`
	TotalExStatus *bool      `json:"totalExStatus,omitempty"`
	TotalExFrom   *time.Time `json:"totalExFrom,omitempty"`
	TotalExTo     *time.Time `json:"totalExTo,omitempty"`
	TotalReStatus *bool      `json:"totalReStatus,omitempty"`
	TotalReFrom   *time.Time `json:"totalReFrom,omitempty"`
	TotalReTo     *time.Time `json:"totalReTo,omitempty"`
	UserExStatus  *bool      `json:"userExStatus,omitempty"`
	UserExFrom    *time.Time `json:"userExFrom,omitempty"`
	UserExTo      *time.Time `json:"userExTo,omitempty"`
	UserReStatus  *bool      `json:"userReStatus,omitempty"`
	UserReFrom    *time.Time `json:"userReFrom,omitempty"`
	UserReTo      *time.Time `json:"userReTo,omitempty"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type NotificationList struct {
	Notifications []*models.Notification `json:"notifications"`
	Total         int32                  `json:"total"`
}

type Order struct {
	Field     string          `json:"field"`
	Direction *OrderDirection `json:"direction,omitempty"`
}

type Pagination struct {
	Limit  *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

type Query struct {
}

type Setting struct {
	ID            uint            `json:"id"`
	Status        *bool           `json:"status,omitempty"`
	Title         *string         `json:"title,omitempty"`
	Description   *string         `json:"description,omitempty"`
	PrimaryDomain *uint           `json:"primaryDomain,omitempty"`
	UserID        *uint           `json:"userId,omitempty"`
	User          *models.User    `json:"user,omitempty"`
	OrderNum      *uint           `json:"orderNum,omitempty"`
	TotalExStatus *bool           `json:"totalExStatus,omitempty"`
	TotalExFrom   *time.Time      `json:"totalExFrom,omitempty"`
	TotalExTo     *time.Time      `json:"totalExTo,omitempty"`
	TotalReStatus *bool           `json:"totalReStatus,omitempty"`
	TotalReFrom   *time.Time      `json:"totalReFrom,omitempty"`
	TotalReTo     *time.Time      `json:"totalReTo,omitempty"`
	UserExStatus  *bool           `json:"userExStatus,omitempty"`
	UserExFrom    *time.Time      `json:"userExFrom,omitempty"`
	UserExTo      *time.Time      `json:"userExTo,omitempty"`
	UserReStatus  *bool           `json:"userReStatus,omitempty"`
	UserReFrom    *time.Time      `json:"userReFrom,omitempty"`
	UserReTo      *time.Time      `json:"userReTo,omitempty"`
	CreatedAt     *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time      `json:"updatedAt,omitempty"`
	DeletedAt     *gorm.DeletedAt `json:"deletedAt,omitempty"`
}

type Subscription struct {
}

type Todo struct {
	ID   uint         `json:"id"`
	Text string       `json:"text"`
	Done bool         `json:"done"`
	User *models.User `json:"user"`
}

type UpdateAdminPermissionInput struct {
	Membership  *bool `json:"membership,omitempty"`
	Financials  *bool `json:"financials,omitempty"`
	Qna         *bool `json:"qna,omitempty"`
	Game        *bool `json:"game,omitempty"`
	Settlement  *bool `json:"settlement,omitempty"`
	Sale        *bool `json:"sale,omitempty"`
	Statistical *bool `json:"statistical,omitempty"`
	Status      *bool `json:"status,omitempty"`
	IP          *bool `json:"ip,omitempty"`
	Dwdelete    *bool `json:"dwdelete,omitempty"`
}

type UpdateAnnouncementInput struct {
	Title       *string    `json:"title,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
	Level       *uint      `json:"level,omitempty"`
}

type UpdateDomainInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Status      *bool   `json:"status,omitempty"`
	UserID      *uint   `json:"userId,omitempty"`
	AutoReg     *bool   `json:"autoReg,omitempty"`
	OrderNum    *uint   `json:"orderNum,omitempty"`
}

type UpdateEventInput struct {
	Title       *string    `json:"title,omitempty"`
	Type        *string    `json:"type,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	DomainID    *uint      `json:"domainId,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
	Level       *uint      `json:"level,omitempty"`
}

type UpdateInboxInput struct {
	Type        *string    `json:"type,omitempty"`
	Title       *string    `json:"title,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	UserID      *uint      `json:"userId,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	OpenedAt    *time.Time `json:"openedAt,omitempty"`
}

type UpdateMenuInput struct {
	Label       *string `json:"label,omitempty"`
	Key         *string `json:"key,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	Path        *string `json:"path,omitempty"`
	ParentID    *uint   `json:"parentId,omitempty"`
	Description *string `json:"description,omitempty"`
	Status      *bool   `json:"status,omitempty"`
	OrderNum    *uint   `json:"orderNum,omitempty"`
}

type UpdateNotificationInput struct {
	Title       *string    `json:"title,omitempty"`
	Description *string    `json:"description,omitempty"`
	Status      *bool      `json:"status,omitempty"`
	OrderNum    *uint      `json:"orderNum,omitempty"`
	ShowFrom    *time.Time `json:"showFrom,omitempty"`
	ShowTo      *time.Time `json:"showTo,omitempty"`
}

type UpdateProfile struct {
	Userid          *string    `json:"userid,omitempty"`
	Name            *string    `json:"name,omitempty"`
	Nickname        *string    `json:"nickname,omitempty"`
	BankName        *string    `json:"bankName,omitempty"`
	HolderName      *string    `json:"holderName,omitempty"`
	AccountNumber   *string    `json:"accountNumber,omitempty"`
	Birthday        *time.Time `json:"birthday,omitempty"`
	Phone           *string    `json:"phone,omitempty"`
	Mobile          *string    `json:"mobile,omitempty"`
	Balance         *float64   `json:"balance,omitempty"`
	Point           *int32     `json:"point,omitempty"`
	Comp            *int32     `json:"comp,omitempty"`
	Level           *int32     `json:"level,omitempty"`
	Favorites       *string    `json:"favorites,omitempty"`
	Referral        *string    `json:"referral,omitempty"`
	AvatarURL       *string    `json:"avatarUrl,omitempty"`
	Bio             *string    `json:"bio,omitempty"`
	SocialLinks     *string    `json:"socialLinks,omitempty"`
	CurrentPassword *string    `json:"currentPassword,omitempty"`
	ConfirmPassword *string    `json:"confirmPassword,omitempty"`
	NewPassword     *string    `json:"newPassword,omitempty"`
}

type UpdateSettingInput struct {
	Status        *bool      `json:"status,omitempty"`
	Title         *string    `json:"title,omitempty"`
	Description   *string    `json:"description,omitempty"`
	PrimaryDomain *uint      `json:"primaryDomain,omitempty"`
	UserID        *uint      `json:"userId,omitempty"`
	OrderNum      *uint      `json:"orderNum,omitempty"`
	TotalExStatus *bool      `json:"totalExStatus,omitempty"`
	TotalExFrom   *time.Time `json:"totalExFrom,omitempty"`
	TotalExTo     *time.Time `json:"totalExTo,omitempty"`
	TotalReStatus *bool      `json:"totalReStatus,omitempty"`
	TotalReFrom   *time.Time `json:"totalReFrom,omitempty"`
	TotalReTo     *time.Time `json:"totalReTo,omitempty"`
	UserExStatus  *bool      `json:"userExStatus,omitempty"`
	UserExFrom    *time.Time `json:"userExFrom,omitempty"`
	UserExTo      *time.Time `json:"userExTo,omitempty"`
	UserReStatus  *bool      `json:"userReStatus,omitempty"`
	UserReFrom    *time.Time `json:"userReFrom,omitempty"`
	UserReTo      *time.Time `json:"userReTo,omitempty"`
}

type UpdateUser struct {
	Name        *string     `json:"name,omitempty"`
	Userid      *string     `json:"userid,omitempty"`
	RootID      *uint       `json:"rootId,omitempty"`
	PartentID   *uint       `json:"partentId,omitempty"`
	Type        *UserType   `json:"type,omitempty"`
	Role        *string     `json:"role,omitempty"`
	UsdtAddress *string     `json:"usdtAddress,omitempty"`
	Status      *UserStatus `json:"status,omitempty"`
	OrderNum    *uint       `json:"orderNum,omitempty"`
}

type UserList struct {
	Users []*models.User `json:"users"`
	Total int32          `json:"total"`
}

type Op string

const (
	OpEq         Op = "eq"
	OpNeq        Op = "neq"
	OpGt         Op = "gt"
	OpGte        Op = "gte"
	OpLt         Op = "lt"
	OpLte        Op = "lte"
	OpIn         Op = "in"
	OpNotIn      Op = "not_in"
	OpLike       Op = "like"
	OpNotLike    Op = "not_like"
	OpIlike      Op = "ilike"
	OpNotIlike   Op = "not_ilike"
	OpBetween    Op = "between"
	OpNotBetween Op = "not_between"
	OpIsNull     Op = "is_null"
	OpIsNotNull  Op = "is_not_null"
)

var AllOp = []Op{
	OpEq,
	OpNeq,
	OpGt,
	OpGte,
	OpLt,
	OpLte,
	OpIn,
	OpNotIn,
	OpLike,
	OpNotLike,
	OpIlike,
	OpNotIlike,
	OpBetween,
	OpNotBetween,
	OpIsNull,
	OpIsNotNull,
}

func (e Op) IsValid() bool {
	switch e {
	case OpEq, OpNeq, OpGt, OpGte, OpLt, OpLte, OpIn, OpNotIn, OpLike, OpNotLike, OpIlike, OpNotIlike, OpBetween, OpNotBetween, OpIsNull, OpIsNotNull:
		return true
	}
	return false
}

func (e Op) String() string {
	return string(e)
}

func (e *Op) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Op(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Op", str)
	}
	return nil
}

func (e Op) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Op) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Op) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleA Role = "A"
	RoleP Role = "P"
	RoleU Role = "U"
)

var AllRole = []Role{
	RoleA,
	RoleP,
	RoleU,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleA, RoleP, RoleU:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserStatus string

const (
	UserStatusA UserStatus = "A"
	UserStatusB UserStatus = "B"
	UserStatusD UserStatus = "D"
	UserStatusI UserStatus = "I"
	UserStatusS UserStatus = "S"
	UserStatusP UserStatus = "P"
)

var AllUserStatus = []UserStatus{
	UserStatusA,
	UserStatusB,
	UserStatusD,
	UserStatusI,
	UserStatusS,
	UserStatusP,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusA, UserStatusB, UserStatusD, UserStatusI, UserStatusS, UserStatusP:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserType string

const (
	UserTypeG UserType = "G"
	UserTypeT UserType = "T"
	UserTypeI UserType = "I"
	UserTypeW UserType = "W"
)

var AllUserType = []UserType{
	UserTypeG,
	UserTypeT,
	UserTypeI,
	UserTypeW,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeG, UserTypeT, UserTypeI, UserTypeW:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
