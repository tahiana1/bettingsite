// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/hotbrainy/go-betting/backend/internal/models"
)

type Mutation struct {
}

type NewProfile struct {
	UserID        string     `json:"userId"`
	Name          string     `json:"name"`
	Nickname      string     `json:"nickname"`
	BankName      *string    `json:"bankName,omitempty"`
	HolderName    *string    `json:"holderName,omitempty"`
	AccountNumber *string    `json:"accountNumber,omitempty"`
	Birthday      *time.Time `json:"birthday,omitempty"`
	Phone         *string    `json:"phone,omitempty"`
	Mobile        *string    `json:"mobile,omitempty"`
	Balance       *float64   `json:"balance,omitempty"`
	Point         *int32     `json:"point,omitempty"`
	Comp          *int32     `json:"comp,omitempty"`
	Favorites     *string    `json:"favorites,omitempty"`
	Referral      *string    `json:"referral,omitempty"`
	AvatarURL     *string    `json:"avatarUrl,omitempty"`
	Bio           *string    `json:"bio,omitempty"`
	SocialLinks   *string    `json:"socialLinks,omitempty"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Query struct {
}

type Subscription struct {
}

type Todo struct {
	ID   string       `json:"id"`
	Text string       `json:"text"`
	Done bool         `json:"done"`
	User *models.User `json:"user"`
}

type UpdateProfile struct {
	Userid          *string    `json:"userid,omitempty"`
	Name            *string    `json:"name,omitempty"`
	Nickname        *string    `json:"nickname,omitempty"`
	BankName        *string    `json:"bankName,omitempty"`
	HolderName      *string    `json:"holderName,omitempty"`
	AccountNumber   *string    `json:"accountNumber,omitempty"`
	Birthday        *time.Time `json:"birthday,omitempty"`
	Phone           *string    `json:"phone,omitempty"`
	Mobile          *string    `json:"mobile,omitempty"`
	Balance         *float64   `json:"balance,omitempty"`
	Point           *int32     `json:"point,omitempty"`
	Comp            *int32     `json:"comp,omitempty"`
	Favorites       *string    `json:"favorites,omitempty"`
	Referral        *string    `json:"referral,omitempty"`
	AvatarURL       *string    `json:"avatarUrl,omitempty"`
	Bio             *string    `json:"bio,omitempty"`
	SocialLinks     *string    `json:"socialLinks,omitempty"`
	CurrentPassword string     `json:"currentPassword"`
	ConfirmPassword *string    `json:"confirmPassword,omitempty"`
	NewPassword     *string    `json:"newPassword,omitempty"`
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RolePartner Role = "PARTNER"
	RoleUser    Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RolePartner,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RolePartner, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
