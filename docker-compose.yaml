services:
  frontend:
    build:
      context: ./frontend/src
      dockerfile: Dockerfile
    container_name: betting-frontend
    # ports:
    #   - "3000:3000"
    volumes:
      - ./frontend/src:/app  
    # depends_on:
      # backend:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network
    restart: always

  backend:
    build:
      context: ./backend/src
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: betting-backend
    depends_on:
      # frontend:
      #   condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/src:/app

    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8080/api/v1/healthz"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network
    restart: always

  postgres:
    image: postgres:16
    container_name: betting-postgres
    ports:
      - "35432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=betting

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: betting-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network    
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z zookeeper 2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: betting-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - app-network    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z kafka 9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-rc1
    container_name: betting-redis
    # ports:
    #   - "6379:6379"

    volumes:
      - ./redis-data:/data
    command: redis-server --requirepass myredispass
    restart: always
    networks:
      - app-network    
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge